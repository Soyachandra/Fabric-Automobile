package main

import (
	"fmt"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	shell "github.com/ipfs/go-ipfs-api"
)

const IPFSAddress = "localhost:5001" // Ensure IPFS daemon is running

var ipfs *shell.Shell

func init() {
	ipfs = shell.NewShell(IPFSAddress)
}

type Car struct {
	CarId        string `json:"carId"`
	Make         string `json:"make"`
	Model        string `json:"model"`
	Color        string `json:"color"`
	Date         string `json:"dateOfManufacture"`
	Manufacturer string `json:"manufacturerName"`
	IPFSHash     string `json:"ipfsHash,omitempty"` // Store IPFS hash
}

// Upload a file to IPFS and return its hash
func UploadFileToIPFS(filePath string) (string, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return "", err
	}
	defer file.Close()

	hash, err := ipfs.Add(file)
	if err != nil {
		return "", err
	}

	fmt.Println("File uploaded to IPFS with hash:", hash)
	return hash, nil
}

func main() {
	router := gin.Default()

	router.GET("/", func(ctx *gin.Context) {
		ctx.JSON(http.StatusOK, gin.H{"message": "Welcome to the Car API"})
	})
	

	router.POST("/api/car", func(ctx *gin.Context) {
		var req Car
		if err := ctx.BindJSON(&req); err != nil {
			ctx.JSON(http.StatusBadRequest, gin.H{"message": "Bad request"})
			return
		}

		// Upload the file to IPFS (assuming file exists)
		ipfsHash, err := UploadFileToIPFS("./sample.pdf")
		if err != nil {
			ctx.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to upload file to IPFS"})
			return
		}
		req.IPFSHash = ipfsHash

		// Store data in Fabric
		result := submitTxnFn(
			"manufacturer",
			"autochannel",
			"KBA-Automobile",
			"CarContract",
			"invoke",
			make(map[string][]byte),
			"CreateCar",
			req.CarId,
			req.Make,
			req.Model,
			req.Color,
			req.Manufacturer,
			req.Date,
			req.IPFSHash,
		)

		ctx.JSON(http.StatusOK, gin.H{"message": "Created new car with file", "ipfsHash": ipfsHash, "result": result})
	})

	router.GET("/api/car/:id", func(ctx *gin.Context) {
		carId := ctx.Param("id")

		result := submitTxnFn(
			"manufacturer", "autochannel", "KBA-Automobile", "CarContract", "query", make(map[string][]byte), "ReadCar", carId,
		)

		// Extract IPFS hash from result (assuming JSON structure)
		ipfsHash := result // You need to extract the actual hash from response
		fileURL := fmt.Sprintf("http://localhost:8080/ipfs/%s", ipfsHash)

		ctx.JSON(http.StatusOK, gin.H{"data": result, "fileURL": fileURL})
	})

	router.Run(":3000")
}
